buildscript {
	ext.rxjavaVersion = "3.1.4"
	ext.rxjavaDocVersion = "3.x"
	ext.licenseVersion = "0.16.1"
	ext.animalSnifferVersion = "1.5.4"
	ext.bndVersion = "6.3.0"
	ext.mavenPublishPluginVersion = "0.18.0"
	ext.jacocoVersion = "0.8.5"

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:$bndVersion"
        classpath "com.vanniktech:gradle-maven-publish-plugin:$mavenPublishPluginVersion"
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseVersion"
        classpath "ru.vyarus:gradle-animalsniffer-plugin:$animalSnifferVersion"
    }
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: "com.github.hierynomus.license"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = "com.github.akarnokd" 
ext.githubProjectName = 'rxjava3-swing'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
    // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    signature 'org.codehaus.mojo.signature:java18:1.0@signature'

    api "io.reactivex.rxjava3:rxjava:$rxjavaVersion"

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

apply plugin: 'biz.aQute.bnd.builder'

jar {
    bnd ('Bundle-Name': 'rxjava3-bridge',
            'Bundle-Vendor': 'akarnokd',
            'Bundle-Description': 'Bridge between Java 6 Swing (GUI) events and RxJava 3 + a scheduler for the swing event dispatch thread.',
            'Import-Package': '!org.junit,!junit.framework,!org.mockito.*,*',
            'Bundle-DocURL': 'https://github.com/akarnokd/RxJavaSwing')
}

apply plugin: "com.vanniktech.maven.publish"

javadoc {
    failOnError = false
    options.links(
		"http://docs.oracle.com/javase/7/docs/api/",
		"http://reactivex.io/RxJava/$rxjavaDocVersion/javadoc"
	)
}

test {
    // systemProperty "java.awt.headless", "true"
    maxHeapSize = "2g"
    testLogging  {
        events "started", "failed" // "skipped", "passed"
    //    showStandardStreams = true
        exceptionFormat="full"
    }
}

license {
    header rootProject.file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    ignoreFailures true
    excludes(["**/*.md", "**/*.txt"])
}

jacoco {
    toolVersion = "$jacocoVersion" // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

build.dependsOn jacocoTestReport

check.dependsOn jacocoTestReport

pmd {
    toolVersion = '6.21.0'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = files('pmd.xml')
}

pmdMain {
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

task pmdPrint(dependsOn: 'pmdMain') doLast {
    File file = rootProject.file('build/reports/pmd/main.xml')
    if (file.exists()) {

        println("Listing first 100 PMD violations")

        file.eachLine { line, count ->
            if (count <= 100) {
               println(line)
            }
        }

    } else {
        println("PMD file not found.")
    }
}

build.dependsOn pmdPrint
check.dependsOn pmdPrint

animalsniffer {
    annotation = 'io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer'
}
